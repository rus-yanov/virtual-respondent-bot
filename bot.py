import os
import json
import logging
from datetime import datetime
from typing import List, Dict

from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

# ------------------ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
assert TELEGRAM_TOKEN, "TELEGRAM_TOKEN is missing"
assert OPENAI_API_KEY, "OPENAI_API_KEY is missing"

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("vr-bot")

# ------------------ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω ------------------
def load_default_persona() -> Dict:
    with open("persona.json", "r", encoding="utf-8") as f:
        return json.load(f)

def load_personas() -> List[Dict]:
    with open("personas_library.json", "r", encoding="utf-8") as f:
        return json.load(f)

DEFAULT_PERSONA = load_default_persona()
PERSONAS = load_personas()

# ------------------ —É—Ç–∏–ª–∏—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ------------------
MAX_HISTORY = 8  # —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ä–µ–ø–ª–∏–∫ (user+assistant)

def get_user_state(context: ContextTypes.DEFAULT_TYPE) -> Dict:
    if "state" not in context.user_data:
        context.user_data["state"] = {
            "persona_id": None,
            "persona_prompt": DEFAULT_PERSONA["prompt"],
            "history": []  # list[{"role": "user"/"assistant", "content": "..."}]
        }
    return context.user_data["state"]

def push_history(state: Dict, role: str, content: str):
    state["history"].append({"role": role, "content": content})
    # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    while len(state["history"]) > MAX_HISTORY:
        state["history"].pop(0)

def history_to_messages(state: Dict) -> List[Dict]:
    msgs = [{"role": "system", "content": state["persona_prompt"]}]
    msgs.extend(state["history"])
    return msgs

def log_chat(user_id: int, user_text: str, bot_text: str):
    os.makedirs("logs", exist_ok=True)
    path = os.path.join("logs", f"{user_id}.log")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().isoformat(timespec='seconds')}] USER: {user_text}\n")
        f.write(f"[{datetime.now().isoformat(timespec='seconds')}] BOT : {bot_text}\n\n")

# ------------------ OpenAI –≤—ã–∑–æ–≤—ã ------------------
async def call_llm(messages: List[Dict], max_tokens: int = 200) -> str:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Chat Completions –¥–ª—è gpt-4o-mini.
    """
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        max_tokens=max_tokens,
        temperature=0.8,
    )
    return resp.choices[0].message.content.strip()

# ------------------ handlers ------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = get_user_state(context)
    state["persona_id"] = None
    state["persona_prompt"] = DEFAULT_PERSONA["prompt"]
    state["history"].clear()

    keyboard = [
        [InlineKeyboardButton("üßë‚Äçüé§ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É", callback_data="pick_persona")],
        [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="begin_chat")],
        [InlineKeyboardButton("üìÑ –°–≤–æ–¥–∫–∞ (/summary)", callback_data="summary_hint")],
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ¬´–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç¬ª.\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞\n"
        "‚Ä¢ –í –∫–æ–Ω—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–π /summary –¥–ª—è –∏—Ç–æ–≥–æ–≤",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "pick_persona":
        # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω
        rows = []
        for p in PERSONAS:
            rows.append([InlineKeyboardButton(p["title"], callback_data=f"persona:{p['id']}")])
        rows.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_home")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω—É:", reply_markup=InlineKeyboardMarkup(rows))
        return

    if query.data.startswith("persona:"):
        persona_id = query.data.split(":", 1)[1]
        persona = next((p for p in PERSONAS if p["id"] == persona_id), None)
        state = get_user_state(context)
        if persona:
            state["persona_id"] = persona_id
            state["persona_prompt"] = persona["prompt"]
            state["history"].clear()
            await query.edit_message_text(f"–ü–µ—Ä—Å–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *{persona['title']}*.\n"
                                          f"–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.", parse_mode="Markdown")
        else:
            await query.edit_message_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –ø–µ—Ä—Å–æ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if query.data == "begin_chat":
        await query.edit_message_text("–û–∫, –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å. –Ø –æ—Ç–≤–µ—á—É –æ—Ç –ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã.")
        return

    if query.data == "summary_hint":
        await query.edit_message_text("–í –∫–æ–Ω—Ü–µ —Å–µ–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /summary ‚Äî —Å–æ–±–µ—Ä—É –≤—ã–≤–æ–¥—ã –∏ –∏–Ω—Å–∞–π—Ç—ã.")
        return

    if query.data == "back_home":
        await query.edit_message_text("–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —á–∞—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É.")
        return

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/summary ‚Äî –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–∏–∞–ª–æ–≥—É\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."
    )

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    state = get_user_state(context)
    push_history(state, "user", user_text)

    try:
        answer = await call_llm(history_to_messages(state))
    except Exception as e:
        logger.exception("LLM error")
        answer = "–•–º, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
    push_history(state, "assistant", answer)
    log_chat(update.effective_user.id, user_text, answer)
    await update.message.reply_text(answer)

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = get_user_state(context)
    if not state["history"]:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏
    msgs = [
        {"role": "system", "content": state["persona_prompt"]},
        *state["history"],
        {"role": "user", "content":
            "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –Ω–∞—à–µ–π –±–µ—Å–µ–¥–µ: 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ –∏–Ω—Å–∞–π—Ç–æ–≤, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, "
            "–æ–∂–∏–¥–∞–Ω–∏—è/—Ç—Ä–∏–≥–≥–µ—Ä—ã, –∏ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö next steps –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞. –§–æ—Ä–º–∞—Ç ‚Äî –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫."}
    ]
    try:
        report = await call_llm(msgs, max_tokens=350)
    except Exception:
        logger.exception("LLM summary error")
        report = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    # –ª–æ–≥
    log_chat(update.effective_user.id, "[/summary]", report)
    await update.message.reply_text("üìÑ –ò—Ç–æ–≥–∏:\n" + report)

# ------------------ –∑–∞–ø—É—Å–∫ ------------------
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    logger.info("Bot is running (polling).")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()