import os
import json
import logging
from datetime import datetime
from typing import List, Dict

from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI


# ------------------ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
assert TELEGRAM_TOKEN, "TELEGRAM_TOKEN is missing"
assert OPENAI_API_KEY, "OPENAI_API_KEY is missing"

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("vr-bot")


# ------------------ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω ------------------
def load_default_persona() -> Dict:
    with open("persona.json", "r", encoding="utf-8") as f:
        return json.load(f)


def load_personas() -> List[Dict]:
    with open("personas_library.json", "r", encoding="utf-8") as f:
        return json.load(f)


DEFAULT_PERSONA = load_default_persona()
PERSONAS = load_personas()


# ------------------ —É—Ç–∏–ª–∏—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ------------------
MAX_HISTORY = 8  # —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ä–µ–ø–ª–∏–∫ (user+assistant)


def get_user_state(context: ContextTypes.DEFAULT_TYPE) -> Dict:
    if "state" not in context.user_data:
        context.user_data["state"] = {
            "persona_id": None,
            "persona_title": None,
            "persona_prompt": DEFAULT_PERSONA["prompt"],
            "segment_details": "",
            "awaiting_segment_details": False,
            "history": []
        }
    return context.user_data["state"]


def push_history(state: Dict, role: str, content: str):
    state["history"].append({"role": role, "content": content})
    while len(state["history"]) > MAX_HISTORY:
        state["history"].pop(0)


def history_to_messages(state: Dict) -> List[Dict]:
    persona_prompt = state["persona_prompt"]
    if state.get("segment_details"):
        persona_prompt += f"\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {state['segment_details']}"
    msgs = [{"role": "system", "content": persona_prompt}]
    msgs.extend(state["history"])
    return msgs


def log_chat(user_id: int, user_text: str, bot_text: str):
    os.makedirs("logs", exist_ok=True)
    path = os.path.join("logs", f"{user_id}.log")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().isoformat(timespec='seconds')}] USER: {user_text}\n")
        f.write(f"[{datetime.now().isoformat(timespec='seconds')}] BOT : {bot_text}\n\n")


# ------------------ OpenAI –≤—ã–∑–æ–≤—ã ------------------
async def call_llm(messages: List[Dict], max_tokens: int = 200) -> str:
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        max_tokens=max_tokens,
        temperature=0.8,
    )
    return resp.choices[0].message.content.strip()


# ------------------ handlers ------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = get_user_state(context)
    state.update({
        "persona_id": None,
        "persona_title": None,
        "persona_prompt": DEFAULT_PERSONA["prompt"],
        "segment_details": "",
        "awaiting_segment_details": False,
        "history": []
    })

    # reply-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    reply_keyboard = [[KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]]

    inline_keyboard = [
        [InlineKeyboardButton("üßë‚Äçüé§ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É", callback_data="pick_persona")],
        [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="begin_chat")],
        [InlineKeyboardButton("üìÑ –°–≤–æ–¥–∫–∞ (/summary)", callback_data="summary_hint")],
    ]

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ¬´–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç¬ª.\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞\n"
        "‚Ä¢ –í –∫–æ–Ω—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–π /summary –¥–ª—è –∏—Ç–æ–≥–æ–≤",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard),
    )


def get_persona_question(persona_id: str) -> str:
    questions = {
        "young_mom_moscow": (
            "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –∑–≤—É—á–∞–ª–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –∑–∞–¥–∞—á–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, "
            "—É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–µ–≥–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –ø–æ–¥—Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –∏ —á–µ–º –æ–Ω –≤–∞–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n‚Ä¢ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞\n‚Ä¢ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ\n‚Ä¢ –∑–∞–Ω—è—Ç–æ—Å—Ç—å\n‚Ä¢ —Ç–∏–ø –∂–∏–ª—å—è\n‚Ä¢ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n‚Ä¢ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ —Å–µ–º—å–∏"
        ),
        "it_engineer": (
            "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –∑–≤—É—á–∞–ª–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –∑–∞–¥–∞—á–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, "
            "—É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–µ–≥–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –ø–æ–¥—Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –∏ —á–µ–º –æ–Ω –≤–∞–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n‚Ä¢ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è\n‚Ä¢ —É—Ä–æ–≤–µ–Ω—å (junior, middle, senior)\n‚Ä¢ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã\n‚Ä¢ —Å—Ç—Ä–∞–Ω–∞\n‚Ä¢ —Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏\n‚Ä¢ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã"
        ),
        "smb_owner": (
            "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –∑–≤—É—á–∞–ª–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –∑–∞–¥–∞—á–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, "
            "—É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–µ–≥–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –ø–æ–¥—Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –∏ —á–µ–º –æ–Ω –≤–∞–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n‚Ä¢ –æ—Ç—Ä–∞—Å–ª—å\n‚Ä¢ —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ –∏ –∫–æ–º–∞–Ω–¥—ã\n‚Ä¢ —Å—Ç–∞–∂ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è\n‚Ä¢ —Ä–µ–≥–∏–æ–Ω\n‚Ä¢ –º–æ–¥–µ–ª—å –±–∏–∑–Ω–µ—Å–∞"
        ),
    }
    return questions.get(persona_id, "–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.")


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    state = get_user_state(context)

    if query.data == "pick_persona":
        rows = []
        for p in PERSONAS:
            rows.append([InlineKeyboardButton(p["title"], callback_data=f"persona:{p['id']}")])
        rows.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_home")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω—É:", reply_markup=InlineKeyboardMarkup(rows))
        return

    if query.data.startswith("persona:"):
        persona_id = query.data.split(":", 1)[1]
        persona = next((p for p in PERSONAS if p["id"] == persona_id), None)
        if persona:
            state["persona_id"] = persona_id
            state["persona_title"] = persona["title"]
            state["persona_prompt"] = persona["prompt"]
            state["history"].clear()
            state["segment_details"] = ""
            state["awaiting_segment_details"] = True

            question_text = get_persona_question(persona_id)
            await query.edit_message_text(
                f"–ü–µ—Ä—Å–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *{persona['title']}*.\n\n{question_text}",
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –ø–µ—Ä—Å–æ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if query.data == "begin_chat":
        await query.edit_message_text("–û–∫, –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å. –Ø –æ—Ç–≤–µ—á—É –æ—Ç –ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã.")
        return

    if query.data == "summary_hint":
        await query.edit_message_text("–í –∫–æ–Ω—Ü–µ —Å–µ–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /summary ‚Äî —Å–æ–±–µ—Ä—É –≤—ã–≤–æ–¥—ã –∏ –∏–Ω—Å–∞–π—Ç—ã.")
        return

    if query.data == "back_home":
        await query.edit_message_text("–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —á–∞—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É.")
        return


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/summary ‚Äî –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–∏–∞–ª–æ–≥—É\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."
    )


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    state = get_user_state(context)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª
    if user_text.lower() in ["–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]:
        await start(update, context)
        return

    # –µ—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã
    if state.get("awaiting_segment_details"):
        state["awaiting_segment_details"] = False
        state["segment_details"] = user_text
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )
        return

    # –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —á–∞—Ç–∞
    push_history(state, "user", user_text)
    try:
        answer = await call_llm(history_to_messages(state))
    except Exception:
        logger.exception("LLM error")
        answer = "–•–º, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
    push_history(state, "assistant", answer)
    log_chat(update.effective_user.id, user_text, answer)
    await update.message.reply_text(answer)


async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = get_user_state(context)
    if not state["history"]:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    persona_title = state.get("persona_title", "–ë–µ–∑ –ø–µ—Ä—Å–æ–Ω—ã")
    segment_details = state.get("segment_details", "")
    summary_intro = f"–û—Ç—á—ë—Ç –ø–æ –ø–µ—Ä—Å–æ–Ω–µ: *{persona_title}*"
    if segment_details:
        summary_intro += f"\n–£—Ç–æ—á–Ω–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞: {segment_details}"

    msgs = [
        {"role": "system", "content": state["persona_prompt"]},
        *state["history"],
        {"role": "user", "content":
            "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –Ω–∞—à–µ–π –±–µ—Å–µ–¥–µ: 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ –∏–Ω—Å–∞–π—Ç–æ–≤, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, "
            "–æ–∂–∏–¥–∞–Ω–∏—è/—Ç—Ä–∏–≥–≥–µ—Ä—ã, –∏ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö next steps –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞. –§–æ—Ä–º–∞—Ç ‚Äî –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫."}
    ]
    try:
        report = await call_llm(msgs, max_tokens=350)
    except Exception:
        logger.exception("LLM summary error")
        report = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    log_chat(update.effective_user.id, "[/summary]", report)
    await update.message.reply_text(f"{summary_intro}\n\nüìÑ –ò—Ç–æ–≥–∏:\n{report}", parse_mode="Markdown")


# ------------------ –∑–∞–ø—É—Å–∫ ------------------
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    logger.info("Bot is running (polling).")
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()